#!/usr/bin/env bun
"use strict";

const { execSync } = require('child_process');
const { existsSync, writeFileSync, readFileSync } = require('fs');
const path = require('path');
const buildUtils = require('./tools/build-utils');

process.chdir(__dirname);

const args = process.argv.slice(2);
const decl = ['--decl', 'decl'].includes(args[0]);
const force = decl || ['--force', 'force', '--full', 'full'].includes(args[0]);
const postinstall = args[0] === 'postinstall';

function shell(cmd) {
	execSync(cmd, {stdio: 'inherit'});
}

// Check to make sure the most recently added or updated dependency is installed at the correct version
try {
	const esbuild = require('esbuild');
	const version = esbuild.version.split('.');
	if (parseInt(version[1]) < 16) {
		throw new Error("esbuild version too old");
	}
} catch (e) {
	console.log('Installing dependencies...');
	shell('bun install');
}

// Make sure config.js exists. If not, copy it over synchronously from
// config-example.js, since it's needed before we can start the server
if (!existsSync('./config/config.js')) {
	console.log('config.js does not exist. Creating one with default settings...');
	writeFileSync(
		'config/config.js',
		readFileSync('config/config-example.js')
	);
}

// npm package, don't rebuild
if (postinstall && existsSync('dist')) {
	process.exit(0);
}

// Run the build
buildUtils.transpile(force, decl)
  .then(() => {
    console.log('Build completed successfully');
  })
  .catch(err => {
    console.error('Build failed:', err);
    process.exit(1);
  });
